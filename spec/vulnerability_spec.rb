require 'spec_helper'
require 'cisa/kev/vulnerability'

describe CISA::KEV::Vulnerability do
  let(:fixtures_dir) { File.join(__dir__,'fixtures') }
  let(:json_file)    { File.join(fixtures_dir,'known_exploited_vulnerabilities.json') }
  let(:raw_json)     { File.read(json_file) }
  let(:json)         { JSON.parse(raw_json)['vulnerabilities'][0] }

  describe ".from_json" do
    subject { described_class.from_json(json) }

    it "must parse the JSON attributes and return a #{described_class} object" do
      expect(subject).to be_kind_of(described_class)
      expect(subject.cve_id).to eq(json['cveID'])
      expect(subject.vendor_project).to eq(json['vendorProject'])
      expect(subject.product).to eq(json['product'])
      expect(subject.vulnerability_name).to eq(json['vulnerabilityName'])
      expect(subject.date_added).to eq(Date.parse(json['dateAdded']))
      expect(subject.short_description).to eq(json['shortDescription'])
      expect(subject.required_action).to eq(json['requiredAction'])
      expect(subject.due_date).to eq(Date.parse(json['dueDate']))
    end

    context "when the 'knownRansomwareCampaignUse' attribute is 'Known'" do
      let(:json) { super().merge('knownRansomwareCampaignUse' => 'Known') }

      it "must set #known_ransomware_campaign_use to true" do
        expect(subject.known_ransomware_campaign_use).to be(true)
      end
    end

    context "when the 'knownRansomwareCampaignUse' attribute is not 'Known'" do
      let(:json) { super().merge('knownRansomwareCampaignUse' => 'Unknown') }

      it "must set #known_ransomware_campaign_use to false" do
        expect(subject.known_ransomware_campaign_use).to be(false)
      end
    end

    context "when the 'notes' attribute is not empty" do
      let(:notes) { 'Foo bar baz' }
      let(:json)  { super().merge('notes' => notes) }

      it "must set #notes" do
        expect(subject.notes).to eq(notes)
      end
    end

    context "when the 'notes' attribute is empty" do
      let(:notes) { '' }
      let(:json)  { super().merge('notes' => notes) }

      it "must not set #notes" do
        expect(subject.notes).to be(nil)
      end
    end
  end
end
